{"ast":null,"code":"var _jsxFileName = \"D:\\\\employee\\\\frontend\\\\src\\\\components\\\\EmployeeForm.js\",\n  _s = $RefreshSig$();\nimport React, { useState } from 'react';\nimport axios from 'axios';\nimport { Typography, TextField, Select, MenuItem, FormControl, InputLabel, RadioGroup, FormControlLabel, Radio, Button, Grid, Box, CircularProgress } from '@mui/material';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst EmployeeForm = ({\n  onSubmit,\n  onClose\n}) => {\n  _s();\n  const [imageFile, setImageFile] = useState(null);\n  const [uploading, setUploading] = useState(false);\n  const handleImageChange = event => {\n    setImageFile(event.target.files[0]);\n  };\n  const uploadImageToCloudinary = async () => {\n    if (!imageFile) return null;\n    const formData = new FormData();\n    formData.append('file', imageFile);\n    formData.append('upload_preset', 'employee_preset'); // Replace with your Cloudinary upload preset\n\n    try {\n      setUploading(true);\n      const response = await axios.post(`https://api.cloudinary.com/v1_1/srinivascloud/image/upload`,\n      // Replace with your Cloudinary cloud name\n      formData);\n      setUploading(false);\n      return response.data.secure_url;\n    } catch (error) {\n      console.error('Error uploading image:', error);\n      setUploading(false);\n      return null;\n    }\n  };\n  const handleSubmit = async event => {\n    event.preventDefault();\n    console.log(formData);\n    setUploading(true);\n    const imageUrl = await uploadImageToCloudinary();\n    if (imageUrl) {\n      // Add the image URL to your form data\n      const formData = new FormData(event.target);\n      formData.append('imageUrl', imageUrl);\n\n      // Call the onSubmit prop with the form data\n      onSubmit(formData);\n    } else {\n      alert('Failed to upload image. Please try again.');\n    }\n    setUploading(false);\n  };\n  return /*#__PURE__*/_jsxDEV(Box, {\n    sx: {\n      backgroundColor: '#f5f5f5',\n      borderRadius: 2,\n      p: 4,\n      width: '75%',\n      maxWidth: 800,\n      mx: 'auto'\n    },\n    children: [/*#__PURE__*/_jsxDEV(Typography, {\n      variant: \"h4\",\n      component: \"h2\",\n      gutterBottom: true,\n      align: \"center\",\n      color: \"primary\",\n      children: \"Create Employee\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 81,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"form\", {\n      onSubmit: handleSubmit,\n      children: /*#__PURE__*/_jsxDEV(Grid, {\n        container: true,\n        spacing: 3,\n        children: [/*#__PURE__*/_jsxDEV(Grid, {\n          item: true,\n          xs: 12,\n          children: [/*#__PURE__*/_jsxDEV(Button, {\n            variant: \"contained\",\n            component: \"label\",\n            fullWidth: true,\n            children: [\"Upload Image\", /*#__PURE__*/_jsxDEV(\"input\", {\n              type: \"file\",\n              hidden: true,\n              onChange: handleImageChange,\n              accept: \"image/*\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 91,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 89,\n            columnNumber: 13\n          }, this), imageFile && /*#__PURE__*/_jsxDEV(Typography, {\n            variant: \"body2\",\n            children: imageFile.name\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 93,\n            columnNumber: 27\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 88,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Grid, {\n          item: true,\n          xs: 12,\n          sm: 6,\n          children: /*#__PURE__*/_jsxDEV(Button, {\n            type: \"submit\",\n            variant: \"contained\",\n            color: \"primary\",\n            fullWidth: true,\n            disabled: uploading,\n            children: uploading ? /*#__PURE__*/_jsxDEV(CircularProgress, {\n              size: 24\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 103,\n              columnNumber: 28\n            }, this) : 'Submit'\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 96,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 95,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Grid, {\n          item: true,\n          xs: 12,\n          sm: 6,\n          children: /*#__PURE__*/_jsxDEV(Button, {\n            variant: \"outlined\",\n            color: \"secondary\",\n            fullWidth: true,\n            onClick: onClose,\n            disabled: uploading,\n            children: \"Cancel\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 107,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 106,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 85,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 84,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 71,\n    columnNumber: 5\n  }, this);\n};\n_s(EmployeeForm, \"GTzpyqL3BPAg9OuQhJofyOwpImA=\");\n_c = EmployeeForm;\nexport default EmployeeForm;\nvar _c;\n$RefreshReg$(_c, \"EmployeeForm\");","map":{"version":3,"names":["React","useState","axios","Typography","TextField","Select","MenuItem","FormControl","InputLabel","RadioGroup","FormControlLabel","Radio","Button","Grid","Box","CircularProgress","jsxDEV","_jsxDEV","EmployeeForm","onSubmit","onClose","_s","imageFile","setImageFile","uploading","setUploading","handleImageChange","event","target","files","uploadImageToCloudinary","formData","FormData","append","response","post","data","secure_url","error","console","handleSubmit","preventDefault","log","imageUrl","alert","sx","backgroundColor","borderRadius","p","width","maxWidth","mx","children","variant","component","gutterBottom","align","color","fileName","_jsxFileName","lineNumber","columnNumber","container","spacing","item","xs","fullWidth","type","hidden","onChange","accept","name","sm","disabled","size","onClick","_c","$RefreshReg$"],"sources":["D:/employee/frontend/src/components/EmployeeForm.js"],"sourcesContent":["import React, { useState } from 'react';\r\nimport axios from 'axios';\r\nimport {\r\n  Typography,\r\n  TextField,\r\n  Select,\r\n  MenuItem,\r\n  FormControl,\r\n  InputLabel,\r\n  RadioGroup,\r\n  FormControlLabel,\r\n  Radio,\r\n  Button,\r\n  Grid,\r\n  Box,\r\n  CircularProgress,\r\n} from '@mui/material';\r\n\r\nconst EmployeeForm = ({ onSubmit, onClose }) => {\r\n  const [imageFile, setImageFile] = useState(null);\r\n  const [uploading, setUploading] = useState(false);\r\n\r\n  const handleImageChange = (event) => {\r\n    setImageFile(event.target.files[0]);\r\n  };\r\n\r\n  const uploadImageToCloudinary = async () => {\r\n    if (!imageFile) return null;\r\n\r\n    const formData = new FormData();\r\n    formData.append('file', imageFile);\r\n    formData.append('upload_preset', 'employee_preset'); // Replace with your Cloudinary upload preset\r\n\r\n    try {\r\n      setUploading(true);\r\n      const response = await axios.post(\r\n        `https://api.cloudinary.com/v1_1/srinivascloud/image/upload`, // Replace with your Cloudinary cloud name\r\n        formData\r\n      );\r\n      setUploading(false);\r\n      return response.data.secure_url;\r\n    } catch (error) {\r\n      console.error('Error uploading image:', error);\r\n      setUploading(false);\r\n      return null;\r\n    }\r\n  };\r\n\r\n  const handleSubmit = async (event) => {\r\n    event.preventDefault();\r\n    console.log(formData)\r\n    setUploading(true);\r\n\r\n    const imageUrl = await uploadImageToCloudinary();\r\n\r\n    if (imageUrl) {\r\n      // Add the image URL to your form data\r\n      const formData = new FormData(event.target);\r\n      formData.append('imageUrl', imageUrl);\r\n\r\n      // Call the onSubmit prop with the form data\r\n      onSubmit(formData);\r\n    } else {\r\n      alert('Failed to upload image. Please try again.');\r\n    }\r\n\r\n    setUploading(false);\r\n  };\r\n\r\n  return (\r\n    <Box\r\n      sx={{\r\n        backgroundColor: '#f5f5f5',\r\n        borderRadius: 2,\r\n        p: 4,\r\n        width: '75%',\r\n        maxWidth: 800,\r\n        mx: 'auto',\r\n      }}\r\n    >\r\n      <Typography variant=\"h4\" component=\"h2\" gutterBottom align=\"center\" color=\"primary\">\r\n        Create Employee\r\n      </Typography>\r\n      <form onSubmit={handleSubmit}>\r\n        <Grid container spacing={3}>\r\n          {/* ... (previous form fields remain unchanged) ... */}\r\n          \r\n          <Grid item xs={12}>\r\n            <Button variant=\"contained\" component=\"label\" fullWidth>\r\n              Upload Image\r\n              <input type=\"file\" hidden onChange={handleImageChange} accept=\"image/*\" />\r\n            </Button>\r\n            {imageFile && <Typography variant=\"body2\">{imageFile.name}</Typography>}\r\n          </Grid>\r\n          <Grid item xs={12} sm={6}>\r\n            <Button \r\n              type=\"submit\" \r\n              variant=\"contained\" \r\n              color=\"primary\" \r\n              fullWidth \r\n              disabled={uploading}\r\n            >\r\n              {uploading ? <CircularProgress size={24} /> : 'Submit'}\r\n            </Button>\r\n          </Grid>\r\n          <Grid item xs={12} sm={6}>\r\n            <Button variant=\"outlined\" color=\"secondary\" fullWidth onClick={onClose} disabled={uploading}>\r\n              Cancel\r\n            </Button>\r\n          </Grid>\r\n        </Grid>\r\n      </form>\r\n    </Box>\r\n  );\r\n};\r\n\r\nexport default EmployeeForm;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}